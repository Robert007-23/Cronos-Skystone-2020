package org.firstinspires.ftc.teamcode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import org.firstinspires.ftc.robotcore.external.JavaUtil;
import java.util.Dictionary;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import android.graphics.Color;

@Autonomous (name = "auto_Robert")
public class Auto_Robert extends LinearOpMode{
//variables

int red = 0;
int blue = 1;
int test = 3;
boolean skybridge = true;
double RightMotorPower = 0.5;
double LeftMotorPower = 0.55;

//time
ElapsedTime runtime = new ElapsedTime(); 

//motors (M_ = motor)
    DcMotor m_leftBack; 
    DcMotor m_leftFront; 
    DcMotor m_rightBack;
    DcMotor m_rightFront; 
    
    
//intake (I_ = intake)

DcMotor i_Left;
DcMotor i_Right;

    
//servo (s_ = servo)

Servo s_LeftF;
Servo s_RightF;

//funtions (THX Bryce) 
    public void drive(double speed, int leftCM, int rightCM) {
        //Reset encoders
        setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER); 
        //Set the target positions for the motors
        setPosition(rightCM * (int)COUNTS_PER_CM, leftCM  *(int)COUNTS_PER_CM);
        //make the motors run to position
        setMode(DcMotor.RunMode.RUN_TO_POSITION);
        //set the power so the robot can move 
        setPower(speed, speed);
        
        //this loop yields the thread while the motors are turning
        while (m_leftBack.isBusy() && m_leftFront.isBusy() 
            && m_rightBack.isBusy() && m_rightFront.isBusy()
            && opModeIsActive()) {}
        
        //reset motor speed and resume normal motor function
        setPower(0,0);
        setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    }
    
        public void strafing(double speed, int leftCM, int rightCM) {
        //Reset encoders
        setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER); 
        //Set the target positions for the motors
        setPositionstrafing(rightCM * (int)COUNTS_PER_CM, leftCM  *(int)COUNTS_PER_CM);
        //make the motors run to position
        setMode(DcMotor.RunMode.RUN_TO_POSITION);
        //set the power so the robot can move 
        setPower(speed, speed);
        
        //this loop yields the thread while the motors are turning
        while (m_leftBack.isBusy() && m_leftFront.isBusy() 
            && m_rightBack.isBusy() && m_rightFront.isBusy()
            && opModeIsActive()) {}
        
        //reset motor speed and resume normal motor function
        setPower(0,0);
        setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    }
    
    

   //The central elasped time responsible for all motor movement
    ElapsedTime m_time = new ElapsedTime();
    ElapsedTime s_time = new ElapsedTime(); 
    
    /* ENCODER INFORMATION */
    static final double     COUNTS_PER_MOTOR_REV    = 288 ;    // eg: TETRIX Motor Encoder
    static final double     DRIVE_GEAR_REDUCTION    = 2.0 ;     // This is < 1.0 if geared UP
    static final double     WHEEL_DIAMETER_CM       = 8.5 ;     // For figuring circumference
    static final double     COUNTS_PER_CM           = (COUNTS_PER_MOTOR_REV) /
                                                      (WHEEL_DIAMETER_CM * 3.1415);
        public void setMode(DcMotor.RunMode mode) {
        m_leftBack.setMode(mode);
        m_leftFront.setMode(mode);
        m_rightBack.setMode(mode);
        m_rightFront.setMode(mode);
    }
    
    public void setPosition(int posRight, int posLeft) {
        m_leftBack.setTargetPosition(posLeft);
        m_leftFront.setTargetPosition(posLeft);
        m_rightBack.setTargetPosition(posRight);
        m_rightFront.setTargetPosition(posRight);
    }
    public void setPositionstrafing(int STRight, int STLeft){
        m_leftBack.setTargetPosition(STRight);
        m_leftFront.setTargetPosition(STLeft);
        m_rightBack.setTargetPosition(STLeft);
        m_rightFront.setTargetPosition(STRight);
        
    }

     public void setPower(double left, double right) {
        m_leftBack.setPower(left);
        m_leftFront.setPower(left);
        m_rightBack.setPower(right);
        m_rightFront.setPower(right);
    }
    
        public void hook(boolean raiseHook) {
        if (raiseHook == true) {
            s_LeftF.setPosition(0.7);
            s_RightF.setPosition(0.7);
            //put hook up 
        } else {
            //put hook down
            s_LeftF.setPosition(0);
            s_RightF.setPosition(0);
        }
        sleep(2000);
        }
    
    
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
@Override
    public void runOpMode() {
//motors
m_leftBack = hardwareMap.get(DcMotor.class, "RL");
m_leftFront = hardwareMap.get(DcMotor.class, "FL");
m_rightBack = hardwareMap.get(DcMotor.class, "RR");
m_rightFront = hardwareMap.get(DcMotor.class, "FR");
i_Right = hardwareMap.get(DcMotor.class, "RI");
i_Left = hardwareMap.get(DcMotor.class, "LI");

//servo
 s_LeftF = hardwareMap.get(Servo.class, "fLeft");
 s_RightF = hardwareMap.get(Servo.class, "fRight");

        m_leftFront.setDirection(DcMotor.Direction.REVERSE);
        m_leftBack.setDirection(DcMotor.Direction.REVERSE);
        m_rightBack.setDirection(DcMotor.Direction.FORWARD);
        m_rightFront.setDirection(DcMotor.Direction.FORWARD);
        i_Left.setDirection(DcMotor.Direction.FORWARD);
        i_Right.setDirection(DcMotor.Direction.REVERSE);
//////////////////////////////////////////////////////////////////////////////////////////////////////////
 waitForStart();
////////////////////////////////////////////////////////////////////////////////////////////////////////// 

switch (blue){
    
case 1:
drive(-.5, -70,-75);
hook(false);    
drive(0.5, 75,75);
hook(true);
strafing(0.75,-80,80);
    
break;


case 2:
    
break;

case 3:
 strafing(0.75, -80,80 ); 
    
    
break;
     
    
    
}
    }  
}




